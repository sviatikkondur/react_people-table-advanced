{"version":3,"sources":["components/Loader/Loader.tsx","api.ts","components/PersonRow.tsx","types/SortTypes.ts","utils/searchHelper.ts","components/SearchLink.tsx","utils/capitalize.ts","components/PeopleTable.tsx","types/Centuries.ts","types/SexFilter.tsx","components/PeopleFilters.tsx","utils/preparePeople.ts","pages/PeoplePage.tsx","components/Navbar.tsx","pages/HomePage.tsx","pages/NotFoundPage.tsx","App.tsx","index.tsx"],"names":["Loader","className","API_URL","wait","delay","Promise","resolve","setTimeout","getPeople","then","fetch","response","json","PersonRow","person","people","personSlug","useParams","useSearchParams","searchParams","getPersonLink","personName","slug","name","find","p","getSlugByName","sParams","toString","getParentName","sex","to","cn","born","died","motherName","fatherName","SortTypes","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","search","capitalize","str","Error","charAt","toUpperCase","slice","PeopleTable","sort","get","order","sortParams","type","values","map","Centuries","SexFilter","title","PeopleFilters","setSearchParams","query","centuries","getAll","useEffect","placeholder","onChange","e","target","handleQueryChange","century","includes","filter","c","isIncludesQuery","normalizedQuery","toLowerCase","preparePeople","filters","sorting","filteredPeople","sortType","length","String","year","Number","isInteger","Math","ceil","yearToCentury","sortedPeople","p1","p2","value1","value2","areNumerical","localeCompare","PeoplePage","useState","setPeople","isLoading","setIsLoading","isError","setIsError","loadPeople","loadedPeople","peopleToDisplay","Navbar","role","isActive","HomePage","NotFoundPage","App","path","element","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.704fe3ab.chunk.js","sourcesContent":["import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import React from 'react';\nimport { Link, useParams, useSearchParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person\n  people: Person[]\n};\n\nexport const PersonRow: React.FC<Props> = ({ person, people }) => {\n  const { personSlug } = useParams();\n  const [searchParams] = useSearchParams();\n\n  const getSlugByName = (name: string | null) => {\n    return people.find(p => p.name === name)?.slug;\n  };\n\n  const getPersonLink = (personName: string | null) => {\n    const slug = getSlugByName(personName);\n    const sParams = searchParams.toString()\n      && `/?${searchParams.toString()}`;\n\n    return `./${slug}${sParams}`;\n  };\n\n  const isPersonInTable = (personName: string | null) => {\n    if (personName) {\n      return people.find(p => p.name === personName);\n    }\n\n    return false;\n  };\n\n  const getParentName = (name: string | null, sex?: string) => {\n    return (\n      <td>\n        {isPersonInTable(name)\n          ? (\n            <Link\n              to={getPersonLink(name)}\n              className={cn({\n                'has-text-danger': sex === 'f',\n              })}\n            >\n              {name}\n            </Link>\n          )\n          : (\n            (name || '-')\n          )}\n      </td>\n    );\n  };\n\n  return (\n    <tr\n      data-cy=\"person\"\n      key={person.slug}\n      className={cn(\n        { 'has-background-warning': person.slug === personSlug },\n      )}\n    >\n      <td>\n        <Link\n          to={getPersonLink(person.name)}\n          className={cn({ 'has-text-danger': person.sex === 'f' })}\n        >\n          {person.name}\n        </Link>\n      </td>\n\n      <td>{person.sex}</td>\n      <td>{person.born}</td>\n      <td>{person.died}</td>\n      {getParentName(person.motherName, 'f')}\n      {getParentName(person.fatherName)}\n    </tr>\n  );\n};\n","export enum SortTypes {\n  name = 'name',\n  sex = 'sex',\n  born = 'born',\n  died = 'died',\n}\n","import { SearchParams } from '../types/SearchParams';\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith } from '../utils/searchHelper';\nimport { SearchParams } from '../types/SearchParams';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","export function capitalize(str: string) {\n  if (typeof str !== 'string') {\n    throw new Error('Input must be a string');\n  }\n\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n","import React from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { Person } from '../types';\nimport { PersonRow } from './PersonRow';\nimport { SortTypes } from '../types/SortTypes';\nimport { SearchLink } from './SearchLink';\nimport { SearchParams } from '../types/SearchParams';\nimport { capitalize } from '../utils/capitalize';\n\ntype Props = {\n  people: Person[]\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const [searchParams] = useSearchParams();\n\n  const sort = searchParams.get('sort');\n  const order = searchParams.get('order');\n\n  const sortParams = (type: string) => {\n    const params: SearchParams = {};\n\n    if (sort !== type) {\n      params.sort = type;\n      params.order = null;\n    }\n\n    if (sort === type && !order) {\n      params.order = 'desc';\n    }\n\n    if (sort === type && order === 'desc') {\n      params.sort = null;\n      params.order = null;\n    }\n\n    return params;\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {Object.values(SortTypes).map(type => (\n            <th key={type}>\n              <span className=\"is-flex is-flex-wrap-nowrap\">\n                {capitalize(type)}\n                <SearchLink\n                  params={sortParams(type)}\n                >\n                  <span className=\"icon\">\n                    <i className={cn(\n                      'fas',\n                      {\n                        'fa-sort': sort !== type,\n                        'fa-sort-up': sort === type && !order,\n                        'fa-sort-down': sort === type && order,\n                      },\n                    )}\n                    />\n                  </span>\n                </SearchLink>\n              </span>\n            </th>\n          ))}\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <PersonRow key={person.slug} person={person} people={people} />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","export const Centuries = ['16', '17', '18', '19', '20'];\n","export const SexFilter = [\n  { title: 'All', value: null },\n  { title: 'Male', value: 'm' },\n  { title: 'Female', value: 'f' },\n];\n","import React, { useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { getSearchWith } from '../utils/searchHelper';\nimport { SearchLink } from './SearchLink';\nimport { Centuries } from '../types/Centuries';\nimport { SexFilter } from '../types/SexFilter';\n\nexport const PeopleFilters: React.FC = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n  const centuries = searchParams.getAll('centuries');\n  const sex = searchParams.get('sex');\n\n  const handleQueryChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newParams = getSearchWith(\n      searchParams, { query: e.target.value || null },\n    );\n\n    setSearchParams(newParams);\n  };\n\n  useEffect(() => {\n    getSearchWith(searchParams, { sex: null });\n  }, []);\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        {SexFilter.map(({ title, value }) => (\n          <SearchLink\n            key={title}\n            params={{\n              sex: value,\n            }}\n            className={cn(\n              { 'is-active': value === sex },\n            )}\n          >\n            {title}\n          </SearchLink>\n        ))}\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={e => handleQueryChange(e)}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {Centuries.map(century => (\n              <SearchLink\n                key={century}\n                params={{\n                  centuries: centuries.includes(century)\n                    ? centuries.filter(c => c !== century)\n                    : [...centuries, century],\n                }}\n                data-cy=\"century\"\n                className={cn(\n                  'button',\n                  'mr-1',\n                  { 'is-info': centuries.includes(century) },\n                )}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={cn(\n                'button',\n                'is-success',\n              )}\n              params={{\n                centuries: null,\n              }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          params={{\n            sex: null,\n            query: null,\n            centuries: null,\n          }}\n          className=\"button is-link is-outlined is-fullwidth\"\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import { Person } from '../types';\nimport { Filters } from '../types/Filters';\nimport { Sorting } from '../types/Sorting';\n\nfunction yearToCentury(year: number) {\n  if (!Number.isInteger(year) || year <= 0) {\n    throw new Error('Please provide a valid positive integer for the year.');\n  }\n\n  const century = Math.ceil(year / 100);\n\n  return century;\n}\n\nconst isIncludesQuery = (\n  name: string | null,\n  normalizedQuery: string,\n) => {\n  return name?.toLowerCase().includes(normalizedQuery);\n};\n\ntype Ftype = (people: Person[], filters: Filters, sorting: Sorting) => Person[];\n\nexport const preparePeople: Ftype = (people, filters, sorting) => {\n  let filteredPeople = [...people];\n  const { sex, query, centuries } = filters;\n  const sortType = sorting.sort;\n  const order = sorting.order || 'asc';\n\n  if (sex) {\n    filteredPeople = filteredPeople.filter(person => person.sex === sex);\n  }\n\n  if (query) {\n    filteredPeople = filteredPeople.filter(person => {\n      const normalizedQuery = query.toLowerCase();\n\n      return isIncludesQuery(person.name, normalizedQuery)\n        || isIncludesQuery(person.fatherName, normalizedQuery)\n        || isIncludesQuery(person.motherName, normalizedQuery);\n    });\n  }\n\n  if (centuries && centuries.length > 0) {\n    filteredPeople = filteredPeople\n      .filter(person => centuries.includes(String(yearToCentury(person.born))));\n  }\n\n  const sortedPeople = [...filteredPeople];\n\n  if (sortType && order) {\n    sortedPeople.sort((p1, p2) => {\n      const value1 = p1[sortType];\n      const value2 = p2[sortType];\n      const areNumerical = (\n        typeof value1 === 'number'\n        && typeof value2 === 'number'\n      );\n\n      if (areNumerical) {\n        if (order === 'asc') {\n          return value1 - value2;\n        }\n\n        return value2 - value1;\n      }\n\n      if (!areNumerical) {\n        if (order === 'asc') {\n          return String(value1)?.localeCompare(String(value2));\n        }\n\n        return String(value2)?.localeCompare(String(value1));\n      }\n\n      return 0;\n    });\n  }\n\n  return sortedPeople;\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { Loader } from '../components/Loader';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\nimport { PeopleTable } from '../components/PeopleTable';\nimport { PeopleFilters } from '../components/PeopleFilters';\nimport { preparePeople } from '../utils/preparePeople';\nimport { Filters } from '../types/Filters';\nimport { Sorting } from '../types/Sorting';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n  const [searchParams] = useSearchParams();\n\n  const filters: Filters = {\n    query: searchParams.get('query') || '',\n    centuries: searchParams.getAll('centuries') || '',\n    sex: searchParams.get('sex') || '',\n  };\n\n  const sorting: Sorting = {\n    sort: searchParams.get('sort') as keyof Person,\n    order: searchParams.get('order'),\n  };\n\n  useEffect(() => {\n    const loadPeople = async () => {\n      setIsError(false);\n\n      try {\n        const loadedPeople = await getPeople();\n\n        setPeople(loadedPeople);\n      } catch {\n        setIsError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadPeople();\n  }, []);\n\n  const peopleToDisplay: Person[] = preparePeople(people, filters, sorting);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            {!isLoading && (\n              <PeopleFilters />\n            )}\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && <Loader />}\n\n              {isError && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {!isLoading && people.length === 0 && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {peopleToDisplay.length > 0 && (\n                <PeopleTable\n                  people={peopleToDisplay}\n                />\n              )}\n\n              {(peopleToDisplay.length === 0 && !isLoading) && (\n                'There are no people matching the current search criteria'\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { NavLink } from 'react-router-dom';\nimport cn from 'classnames';\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            to=\"/\"\n            className={\n              ({ isActive }) => cn(\n                'navbar-item',\n                { 'has-background-grey-lighter': isActive },\n              )\n            }\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            to=\"/people\"\n            className={\n              ({ isActive }) => cn(\n                'navbar-item',\n                { 'has-background-grey-lighter': isActive },\n              )\n            }\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","export const HomePage: React.FC = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","export const NotFoundPage: React.FC = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","import './App.scss';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { PeoplePage } from './pages/PeoplePage';\nimport { Navbar } from './components/Navbar';\nimport { HomePage } from './pages/HomePage';\nimport { NotFoundPage } from './pages/NotFoundPage';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route path=\"/\" element={<HomePage />} />\n            <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n            <Route path=\"/people\" element={<PeoplePage />}>\n              <Route path=\":personSlug\" element={<PeoplePage />} />\n            </Route>\n            <Route path=\"*\" element={<NotFoundPage />} />\n          </Routes>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}